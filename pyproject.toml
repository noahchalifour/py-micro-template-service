[tool.poetry]
name = "py-micro-service"
version = "0.1.0"
description = "Python microservice template with gRPC and dependency injection"
authors = ["Noah Chalifour <chalifournoah@gmail.com>"]
readme = "README.md"
packages = [{include = "py_micro/service", from = "src"}]

[tool.poetry.dependencies]
python = "^3.12"
grpcio = "^1.73.0"
grpcio-tools = "^1.73.0"
grpcio-reflection = "^1.73.0"
dependency-injector = "^4.41.0"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
structlog = "^23.2.0"
rich = "^14.0.0"
modelrepo = "^1.0.0"
py-micro-model = "^1.0.0"

[tool.poetry.group.dev.dependencies]
black = "^23.12.0"
isort = "^5.13.0"
flake8 = "^6.1.0"
mypy = "^1.8.0"
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.23.0"
pytest-mock = "^3.12.0"
grpcio-testing = "^1.60.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
microservice = "py_micro.service.main:run"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src/py_micro/service",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=100",
    "-v"
]
asyncio_mode = "strict"

